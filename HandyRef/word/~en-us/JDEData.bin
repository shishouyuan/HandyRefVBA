<?xml version="1.0" encoding="UTF-8" ?>
<document version="2.0">
    <name>HandyRef</name>
    <property desc="" lock="false" password="" />
    <activemodule>1</activemodule>
    <codemodule name="Main" id="1">
        <window cursorpos="1405" actived="true" visible="true" />
        <codetext>//https://github.com/shishouyuan/HandyRefVBA&#x0A;&#x0A;//A handy way to insert Cross Reference in MS Word and WPS&#x0A;//Author: Shouyuan Shi @ South China University of Technology&#x0A;//E-mail: shishouyuan@outlook.com&#x0A;//Creating Date: 2021/5/11&#x0A;&#x0A;&#x0A;//用于在Word里方便地添加交叉引用&#x0A;//作者: 史守圆 @ 华南理工大学&#x0A;//E-mail: shishouyuan@outlook.com&#x0A;//创建时期: 2021/5/11&#x0A;&#x0A;&#x0A;var HandyRefVersion&#x0A;&#x0A;var TEXT_HandyRefGithubUrl&#x0A;var BookmarkPrefix&#x0A;var RefBrokenCommentTitle&#x0A;var HandyRef_Lang&#x0A;var BrokenRefNumPosHolder&#x0A;&#x0A;var TEXT_HandyRefAppName&#x0A;var TEXT_HandyRefAuthor&#x0A;var TEXT_HandyRefDescription&#x0A;var TEXT_CreateReferencePoint_nullSelected&#x0A;var TEXT_InsertCrossReferenceField_NoRefPoint&#x0A;var TEXT_InsertCrossReferenceField_CannotCrossFile&#x0A;var TEXT_VersionPrompt&#x0A;var TEXT_NonCommecialPrompt&#x0A;var TEXT_RefBrokenComment&#x0A;var TEXT_BrokenRefFoundPrompt&#x0A;var TEXT_NoBrokenRefFoundPrompt&#x0A;var TEXT_RefBrokenCommentClearedPrompt&#x0A;var TEXT_RefCheckingForWholeDocPrompt&#x0A;var TEXT_ClearRefBrokenCommentForWholeDocPrompt&#x0A;var TEXT_UnknownErrOccurredPrompt&#x0A;var TEXT_ActionName_CreateSource&#x0A;var TEXT_ActionName_InsertReference&#x0A;var TEXT_ActionName_CheckReference&#x0A;var TEXT_ActionName_ClearRefBrokenComment&#x0A;&#x0A;function HandyRef_OnLoad(ribbonUI) {&#x0A;&#x0A;    HandyRefVersion = &quot;20210620.1556.JS&quot;&#x0A;&#x0A;    TEXT_HandyRefGithubUrl = &quot;https://github.com/shishouyuan/HandyRefVBA&quot;&#x0A;&#x0A;    BookmarkPrefix = &quot;_HandyRef&quot;&#x0A;    RefBrokenCommentTitle = &quot;$HANDYREF_REFERENCE_BROKEN_COMMENT$&quot;&#x0A;&#x0A;    HandyRef_Lang = &quot;en-us&quot;&#x0A;&#x0A;    BrokenRefNumPosHolder = &quot;#&quot;&#x0A;&#x0A;    if (HandyRef_Lang == &quot;zh-cn&quot;) {&#x0A;&#x0A;        TEXT_HandyRefAppName = &quot;HandyRef-快引&quot;&#x0A;        TEXT_HandyRefAuthor = &quot;史守圆 @ 华南理工大学&quot;&#x0A;        TEXT_HandyRefDescription = &quot;为 Word 提供一个快速添加交叉引用的方式。&quot;&#x0A;        TEXT_CreateReferencePoint_nullSelected = &quot;请先选中要引用的内容!&quot;&#x0A;        TEXT_InsertCrossReferenceField_NoRefPoint = &quot;当前没有设置引用点!&quot;&#x0A;        TEXT_InsertCrossReferenceField_CannotCrossFile = &quot;不支持跨文件引用!&quot;&#x0A;        TEXT_VersionPrompt = &quot;版本：&quot;&#x0A;        TEXT_NonCommecialPrompt = &quot;仅限非商业用途&quot;&#x0A;        TEXT_RefBrokenComment = &quot;引用源丢失！&quot;&#x0A;        TEXT_BrokenRefFoundPrompt = &quot;发现了 &quot; + BrokenRefNumPosHolder + &quot; 个损坏的引用，已为其添加批注。&quot;&#x0A;        TEXT_NoBrokenRefFoundPrompt = &quot;没有发现损坏的引用。&quot;&#x0A;        TEXT_RefBrokenCommentClearedPrompt = &quot;引用损坏批注已清除。&quot;&#x0A;        TEXT_RefCheckingForWholeDocPrompt = &quot;当前没有选中的内容，将检查整个文档。&quot; + &apos;\r\n&apos; + &quot;这可能需要一些时间。&quot;&#x0A;        TEXT_ClearRefBrokenCommentForWholeDocPrompt = &quot;当前没有选中的内容，将清除整个文档中的引用损坏批注。&quot;&#x0A;        TEXT_UnknownErrOccurredPrompt = &quot;遇到错误：&quot;&#x0A;        TEXT_ActionName_CreateSource = &quot;创建引用源&quot;&#x0A;        TEXT_ActionName_InsertReference = &quot;交叉引用&quot;&#x0A;        TEXT_ActionName_CheckReference = &quot;检查引用&quot;&#x0A;        TEXT_ActionName_ClearRefBrokenComment = &quot;清除批注&quot;&#x0A;&#x0A;&#x0A;    } else {&#x0A;&#x0A;        TEXT_HandyRefAppName = &quot;HandyRef&quot;&#x0A;        TEXT_HandyRefAuthor = &quot;Shouyuan Shi @ South China University of Technology&quot;&#x0A;        TEXT_HandyRefDescription = &quot;Provide a handy way to insert Cross Reference in MS Word.&quot;&#x0A;        TEXT_CreateReferencePoint_nullSelected = &quot;Nothing selected!&quot;&#x0A;        TEXT_InsertCrossReferenceField_NoRefPoint = &quot;No Reference Point Selected!&quot;&#x0A;        TEXT_InsertCrossReferenceField_CannotCrossFile = &quot;Cross file reference is ! supported!&quot;&#x0A;        TEXT_VersionPrompt = &quot;Version: &quot;&#x0A;        TEXT_NonCommecialPrompt = &quot;Only for NON-COMMERCIAL use.&quot;&#x0A;        TEXT_RefBrokenComment = &quot;Reference Broken!&quot;&#x0A;        TEXT_BrokenRefFoundPrompt = BrokenRefNumPosHolder + &quot; broken reference found. Comments are attached.&quot;&#x0A;        TEXT_NoBrokenRefFoundPrompt = &quot;No broken reference found.&quot;&#x0A;        TEXT_RefBrokenCommentClearedPrompt = &quot;Reference broken comments cleared.&quot;&#x0A;        TEXT_RefCheckingForWholeDocPrompt = &quot;Nothing is selected. The whole document will be checked.&quot; + &apos;\r\n&apos; + &quot;This may take a while.&quot;&#x0A;        TEXT_ClearRefBrokenCommentForWholeDocPrompt = &quot;Nothing is selected. Reference broken comments in the whole document will be cleared.&quot;&#x0A;        TEXT_UnknownErrOccurredPrompt = &quot;Error occurred:&quot;&#x0A;        TEXT_ActionName_CreateSource = &quot;Create Source&quot;&#x0A;        TEXT_ActionName_InsertReference = &quot;Insert Reference&quot;&#x0A;        TEXT_ActionName_CheckReference = &quot;Check Reference&quot;&#x0A;        TEXT_ActionName_ClearRefBrokenComment = &quot;Clear Comments&quot;&#x0A;&#x0A;    }&#x0A;}&#x0A;&#x0A;&#x0A;function HandyRef_GetEnabled(control) {&#x0A;    return true&#x0A;    //return ActiveDocument!=null&#x0A;}&#x0A;&#x0A;&#x0A;var selectedBM&#x0A;var selectedRange&#x0A;var selectedIsNote&#x0A;&#x0A;&#x0A;function HandyRef_FormatUndoRecordText(s) {&#x0A;    return s + &quot;-&quot; + TEXT_HandyRefAppName&#x0A;}&#x0A;&#x0A;function HandyRef_ShowUnknowErrorPrompt(e) {&#x0A;    alert(TEXT_UnknownErrOccurredPrompt + &apos;\r\n&apos; + e.Description)&#x0A;}&#x0A;&#x0A;function HandyRef_CreateReferencePoint_RibbonFun(control) { // wrap the function to match the signature called by ribbion&#x0A;    HandyRef_CreateReferencePoint()&#x0A;}&#x0A;&#x0A;function HandyRef_CreateReferencePoint() {&#x0A;    var rg = Application.Selection.Range&#x0A;&#x0A;    selectedIsNote = false&#x0A;    selectedRange = rg&#x0A;    selectedBM = null&#x0A;    if (rg.Endnotes.Count == 0 &amp;&amp; rg.Footnotes.Count == 1) {&#x0A;        var fn = rg.Footnotes.Item(1)&#x0A;        if (rg.InRange(fn.Range) || rg.InRange(fn.Reference) || !fn.Reference.InRange(rg)) {&#x0A;            selectedIsNote = true&#x0A;            selectedRange = fn.Reference&#x0A;        }&#x0A;    }&#x0A;    else if (rg.Footnotes.Count == 0 &amp;&amp; rg.Endnotes.Count == 1) {&#x0A;        var en = rg.Endnotes.Item(1)&#x0A;        if (rg.InRange(en.Range) || rg.InRange(en.Reference) || !en.Reference.InRange(rg)) {&#x0A;            selectedIsNote = true&#x0A;            selectedRange = en.Reference&#x0A;        }&#x0A;    }&#x0A;&#x0A;    if (rg.End == rg.Start &amp;&amp; !selectedIsNote) {&#x0A;        selectedRange = null&#x0A;        alert(TEXT_CreateReferencePoint_nullSelected)&#x0A;    }&#x0A;&#x0A;}&#x0A;&#x0A;&#x0A;function HandyRef_InsertCrossReferenceField_RibbonFun(control) {&#x0A;    HandyRef_InsertCrossReferenceField()&#x0A;}&#x0A;&#x0A;&#x0A;&#x0A;function HandyRef_InsertCrossReferenceField() {&#x0A;    try {&#x0A;        Application.UndoRecord.StartCustomRecord(HandyRef_FormatUndoRecordText(TEXT_ActionName_InsertReference))&#x0A;&#x0A;        var bmValid = false&#x0A;        if (selectedBM) {&#x0A;            if (Application.IsObjectValid(selectedBM)) {&#x0A;                if (selectedBM.Parent == ActiveDocument) {&#x0A;                    bmValid = true&#x0A;                }&#x0A;                else {&#x0A;                    alert(TEXT_InsertCrossReferenceField_CannotCrossFile)&#x0A;                    return&#x0A;                }&#x0A;            }&#x0A;            else {// it&apos;s possible the bookmark is deleted by the user, but the range remaind.&#x0A;                selectedBM = null&#x0A;            }&#x0A;        }&#x0A;        if (!bmValid) {&#x0A;            if (!selectedRange || !Application.IsObjectValid(selectedRange) || selectedRange.Start == selectedRange.End) {&#x0A;                selectedRange = null&#x0A;                alert(TEXT_InsertCrossReferenceField_NoRefPoint)&#x0A;                return&#x0A;            }&#x0A;            else if (selectedRange.Document != ActiveDocument) {&#x0A;                alert(TEXT_InsertCrossReferenceField_CannotCrossFile)&#x0A;                return&#x0A;            }&#x0A;            else {&#x0A;                var oldbm// As Bookmark&#x0A;                var bmShowHiddenOld = selectedRange.Bookmarks.ShowHidden&#x0A;&#x0A;                //search for existing bookmark reference the same range&#x0A;                var bmRegExp = new RegExp(BookmarkPrefix + &quot;\\d+&quot;)&#x0A;                selectedRange.Bookmarks.ShowHidden = true&#x0A;                for (var i = 1; i &lt;= selectedRange.Bookmarks.Count; i++) {&#x0A;                    var bmi = selectedRange.Bookmarks.Item(i)&#x0A;                    if (bmi.Range.IsEqual(selectedRange) &amp;&amp; bmRegExp.test(bmi.Name)) {&#x0A;                        oldbm = bmi&#x0A;                        break&#x0A;                    }&#x0A;                }&#x0A;                selectedRange.Bookmarks.ShowHidden = bmShowHiddenOld&#x0A;&#x0A;                if (oldbm) {&#x0A;                    selectedBM = oldbm&#x0A;                }&#x0A;                else {&#x0A;                    //create new bookmark using timestamp as its name&#x0A;                    selectedBM = selectedRange.Bookmarks.Add(BookmarkPrefix + new Date().getTime(), selectedRange)&#x0A;                }&#x0A;                bmValid = true&#x0A;&#x0A;            }&#x0A;        }&#x0A;        if (bmValid) {&#x0A;            if (selectedIsNote) {&#x0A;                ActiveDocument.Fields.Add(Selection.Range, wdFieldNoteRef, selectedBM.Name + &quot; \\h&quot;)&#x0A;            }&#x0A;            else {&#x0A;                ActiveDocument.Fields.Add(Selection.Range, wdFieldRef, selectedBM.Name + &quot; \\h&quot;)&#x0A;            }&#x0A;        }&#x0A;    }&#x0A;    catch (err) {&#x0A;        HandyRef_ShowUnknowErrorPrompt(err.message)&#x0A;    }&#x0A;    finally {&#x0A;        Application.UndoRecord.EndCustomRecord()&#x0A;    }&#x0A;&#x0A;}&#x0A;&#x0A;function HandyRef_ClearRefBrokenComment_RibbonFun(control) {&#x0A;    if (Application.Selection.End - Application.Selection.Start == 0) {&#x0A;        alert(TEXT_ClearRefBrokenCommentForWholeDocPrompt)&#x0A;        HandyRef_ClearRefBrokenComment(ActiveDocument.Range())&#x0A;    }&#x0A;    else {&#x0A;        HandyRef_ClearRefBrokenComment(Application.Selection.Range)&#x0A;    }&#x0A;    alert(TEXT_RefBrokenCommentClearedPrompt)&#x0A;&#x0A;}&#x0A;&#x0A;function HandyRef_ClearRefBrokenComment(targetRange) {&#x0A;    try {&#x0A;        Application.UndoRecord.StartCustomRecord(HandyRef_FormatUndoRecordText(TEXT_ActionName_ClearRefBrokenComment))&#x0A;&#x0A;        var toDelete = []&#x0A;        for (var i = 1; i &lt;= targetRange.Comments.Count; i++) {&#x0A;            var cmt = targetRange.Comments.Item(i)&#x0A;            var s = cmt.Range.Paragraphs.Last.Range.Text.trim()&#x0A;            if (s.indexOf(RefBrokenCommentTitle) == s.length - RefBrokenCommentTitle.length) {&#x0A;                toDelete.push(cmt)&#x0A;            }&#x0A;&#x0A;        }&#x0A;        for (var i in toDelete) {&#x0A;            toDelete[i].DeleteRecursively()&#x0A;        }&#x0A;    }&#x0A;    catch (err) {&#x0A;        HandyRef_ShowUnknowErrorPrompt(err.message)&#x0A;    }&#x0A;    finally {&#x0A;        Application.UndoRecord.EndCustomRecord()&#x0A;    }&#x0A;&#x0A;}&#x0A;&#x0A;function HandyRef_CheckForBrokenRef_RibbonFun(control) {&#x0A;&#x0A;    if (Application.Selection.End - Application.Selection.Start == 0) {&#x0A;        alert(TEXT_RefCheckingForWholeDocPrompt)&#x0A;        HandyRef_CheckForBrokenRef(ActiveDocument.Range())&#x0A;    }&#x0A;    else {&#x0A;        HandyRef_CheckForBrokenRef(Application.Selection.Range)&#x0A;    }&#x0A;&#x0A;}&#x0A;&#x0A;function HandyRef_CheckForBrokenRef(checkingRange) {&#x0A;    var oldScreenUpdating = Application.ScreenUpdating&#x0A;    try {&#x0A;        Application.ScreenUpdating = false&#x0A;        Application.UndoRecord.StartCustomRecord(HandyRef_FormatUndoRecordText(TEXT_ActionName_CheckReference))&#x0A;        HandyRef_ClearRefBrokenComment(checkingRange)&#x0A;&#x0A;        //var refRegExp = /^\s*(?:NOTE)?REF.*?(?&lt;!\\\*)\s+([^\s\\]+).*/i&#x0A;        var refRegExp = /^\s*(NOTE){0,1}REF.*\s([^\s\\]+).*/i&#x0A;        var refRegExp0 = /\\[*@#]\s*[^\s\\]*/g&#x0A;&#x0A;        var brokenCount = 0&#x0A;&#x0A;        for (var i = 1; i &lt;= checkingRange.Fields.Count; i++) {&#x0A;            var fd = checkingRange.Fields.Item(i)&#x0A;&#x0A;            if (fd.Type == wdFieldRef || fd.Type == wdFieldNoteRef) {&#x0A;                r = refRegExp.exec(fd.Code.Text.replace(refRegExp0, &quot;&quot;))&#x0A;                var isBroken = true&#x0A;                if (r.length &gt; 0) {&#x0A;                    var bmName = r[2]&#x0A;                    if (ActiveDocument.Bookmarks.Exists(bmName)) {&#x0A;                        isBroken = false&#x0A;                    }&#x0A;                }&#x0A;                if (isBroken) {&#x0A;                    brokenCount = brokenCount + 1&#x0A;&#x0A;                    var cmt = fd.Code.Comments.Add(fd.Code)&#x0A;                    var t = cmt.Range&#x0A;                    t.InsertAfter(TEXT_RefBrokenComment)&#x0A;                    t.InsertParagraphAfter()&#x0A;                    t.InsertAfter(RefBrokenCommentTitle)&#x0A;&#x0A;                    t = cmt.Range.Paragraphs.First.Range&#x0A;                    t.Bold = true&#x0A;                    t.HighlightColorIndex = wdYellow&#x0A;                }&#x0A;            }&#x0A;        }&#x0A;&#x0A;        if (brokenCount == 0) {&#x0A;            alert(TEXT_NoBrokenRefFoundPrompt)&#x0A;        }&#x0A;        else {&#x0A;            alert(TEXT_BrokenRefFoundPrompt.replace(BrokenRefNumPosHolder, brokenCount))&#x0A;            try {&#x0A;                ActiveWindow.View.SplitSpecial = wdPaneNone&#x0A;            }&#x0A;            catch (err) { }&#x0A;            ActiveWindow.View.SplitSpecial = wdPaneRevisions&#x0A;        }&#x0A;    }&#x0A;    catch (err) {&#x0A;        HandyRef_ShowUnknowErrorPrompt(err.message)&#x0A;    }&#x0A;    finally {&#x0A;        Application.ScreenUpdating = oldScreenUpdating&#x0A;        Application.UndoRecord.EndCustomRecord()&#x0A;    }&#x0A;&#x0A;}&#x0A;&#x0A;function HandyRef_About_RibbonFun(control) {&#x0A;    HandyRef_About()&#x0A;}&#x0A;&#x0A;function HandyRef_About() {&#x0A;    alert(TEXT_HandyRefAppName + &apos;\r\n&apos; + TEXT_HandyRefDescription + &apos;\r\n&apos; + TEXT_NonCommecialPrompt + &apos;\r\n\r\n&apos; + TEXT_VersionPrompt + HandyRefVersion + &apos;\r\n&apos; + TEXT_HandyRefAuthor + &apos;\r\n&apos; + TEXT_HandyRefGithubUrl)//)&#x0A;}&#x0A;&#x0A;function HandyRef_GetLatestVersion_RibbonFun(control) {&#x0A;    try {&#x0A;        Shell(&quot;explorer.exe &quot; + TEXT_HandyRefGithubUrl, jsNormalFocus)&#x0A;    }&#x0A;    catch (err) {&#x0A;        HandyRef_ShowUnknowErrorPrompt(err)&#x0A;    }&#x0A;}&#x0A;&#x0A;</codetext>
    </codemodule>
    <functionsdata />
</document>
